package me.Swedz.jca.tournaments;

import java.util.ArrayList;

import me.Swedz.jca.JCA;
import me.Swedz.jca.challonge.Challonge;
import me.Swedz.jca.match.Matches;
import me.Swedz.jca.participants.Participants;
import me.Swedz.jca.web.Web;

@SuppressWarnings("static-access")
public class Tournament {
	protected String api_key;
	protected String name;
	protected Type type;
	protected String url;
	protected String desc;
	protected boolean open_signup;
	protected boolean hold_third_place_match;
	protected boolean hide_forum;
	protected boolean isprivate;
	protected ArrayList<String> participants;
	protected boolean sequential_pairings;
	protected int timeout;
	protected boolean debug;
	
	/*
	 * Creates a completely new SingleElim.
	 * If you use this, you need to set the api_key using
	 * #setAPIKey(String value)
	 */
	public Tournament() {
		this.name = "Tournament";
		this.type = Type.SINGLE;
		this.url = ""+(System.currentTimeMillis()/1000);
		this.desc = "Tournament generated by JCA";
		this.open_signup = false;
		this.hold_third_place_match = false;
		this.hide_forum = false;
		this.isprivate = false;
		this.sequential_pairings = false;
		this.participants = new ArrayList<String>();
		this.timeout = 30*1000;
		this.debug = false;
	}
	
	/*
	 * Sets the Tournament's api_key
	 */
	public Tournament setAPIKey(String value) {
		this.api_key = value;
		if(this.debug) {
			System.out.println("[DEBUG]: Set api_key to " + value);
		}
		return this;
	}
	
	/*
	 * Sets the Tournament's display name
	 */
	public Tournament setName(String value) {
		this.name = value;
		if(this.debug) {
			System.out.println("[DEBUG]: Set name to " + value);
		}
		return this;
	}
	
	/*
	 * Sets the Tournament's type (SINGLE, DOUBLE)
	 */
	public Tournament setType(Type value) {
		this.type = value;
		if(this.debug) {
			System.out.println("[DEBUG]: Set name to " + value.getName());
		}
		return this;
	}
	
	/*
	 * Sets the Tournament's url
	 */
	public Tournament setURL(String value) {
		this.url = value;
		JCA.tournament = value;
		if(this.debug) {
			System.out.println("[DEBUG]: Set url to " + value);
		}
		return this;
	}
	
	/*
	 * Sets the Tournament's description
	 */
	public Tournament setDesc(String value) {
		this.desc = value;
		if(this.debug) {
			System.out.println("[DEBUG]: Set desc to " + value);
		}
		return this;
	}
	
	/*
	 * Should the tournament be open to anyone to just join?
	 */
	public Tournament setOpenSignup(boolean value) {
		this.open_signup = value;
		if(this.debug) {
			System.out.println("[DEBUG]: Set open_signup to " + value);
		}
		return this;
	}
	
	/*
	 * Should the tournament hold a third place match to define 
	 * the 3rd place player/team?
	 */
	public Tournament setHoldThirdPlaceMatch(boolean value) {
		this.hold_third_place_match = value;
		if(this.debug) {
			System.out.println("[DEBUG]: Set hold_third_place_match to " + value);
		}
		return this;
	}
	
	/*
	 * Should the forum tab be shown on the tournament page?
	 */
	public Tournament setHideForum(boolean value) {
		this.hide_forum = value;
		if(this.debug) {
			System.out.println("[DEBUG]: Set hide_forum to " + value);
		}
		return this;
	}
	
	/*
	 * Should the tournament be hidden from the public browsable 
	 * index and your profile?
	 */
	public Tournament setPrivate(boolean value) {
		this.isprivate = value;
		if(this.debug) {
			System.out.println("[DEBUG]: Set private to " + value);
		}
		return this;
	}
	
	/*
	 * Should participants be ordered traditionally by seeding rules, 
	 * or should they be paired by how you added them to the list?
	 */
	public Tournament setSequentialPairings(boolean value) {
		this.sequential_pairings = value;
		if(this.debug) {
			System.out.println("[DEBUG]: Set sequential_pairings to " + value);
		}
		return this;
	}
	
	/*
	 * Supply a list of participants to be automatically added to the
	 * tournament's page
	 */
	public Tournament withPlayers(ArrayList<String> participants) {
		if(this.debug) {
			System.out.println("[DEBUG]: Adding participants...");
		}
		for(String lp : participants) {
			this.participants.add(lp);
			if(this.debug) {
				System.out.println("[DEBUG]: Added " + lp + " to participants");
			}
		}
		return this;
	}
	
	/*
	 * Supply a single participant to be added to the tournament's page
	 */
	public Tournament withPlayer(String participant) {
		this.participants.add(participant);
		if(this.debug) {
			System.out.println("[DEBUG]: Added " + participant + " to participants");
		}
		return this;
	}
	
	/*
	 * How long until the query should time out?
	 */
	public Tournament timeout(int value) {
		JCA.timeout = value;
		if(this.debug) {
			System.out.println("[DEBUG]: Set timeout to " + value);
		}
		return this;
	}
	
	/*
	 * Should reply messages from the webserver be outputted to the
	 * console?
	 */
	public Tournament debug(boolean value) {
		this.debug = value;
		if(this.debug) {
			System.out.println("[DEBUG]: Set debug to " + value);
		}
		return this;
	}
	
	/*
	 * Finalizes the Tournament build and creates the tournament
	 */
	public Tournament build() {
		JCA.api_key = this.api_key;
		
		JCA.challonge = new Challonge();
		JCA.matches = new Matches();
		JCA.participants = new Participants();
		
		if(this.debug) {
			System.out.println("[DEBUG]: Building Challonge page ...");
		}
		
		String payload = 
		"{\"tournament\": { "
			+ "\"name\": \"" + this.name + "\", "
			+ "\"tournament_type\": \"" + this.type.getName() + "\", "
			+ "\"url\": \"" + this.url + "\", "
			+ "\"description\": \"" + this.desc + "\", "
			+ "\"open_signup\": \"" + this.open_signup + "\", "
			+ "\"hold_third_place_match\": \"" + this.hold_third_place_match + "\", "
			+ "\"hide_forum\": \"" + this.hide_forum + "\", "
			+ "\"private\": \"" + this.isprivate + "\", "
			+ "\"sequential_pairings\": \"" + this.sequential_pairings + "\""
		+ "}}";
		if(this.debug) {
			System.out.println(payload);
		}
		String reply = Web.post("https://api.challonge.com/v1/tournaments.json", payload, this.timeout);
		if(this.debug) {
			System.out.println("[DEBUG]: " + reply);
		}
		
		if(!this.participants.isEmpty()) {
			int seed = 1;
			for(String lp : this.participants) {
				Participants.seeds.put(lp, seed);
				
				reply = Web.post("https://api.challonge.com/v1/tournaments/" + this.url + "/participants.json", "{\"participant\": {\"name\": \"" + lp + "\"}}", 30*1000);
				if(this.debug) {
					System.out.println("[DEBUG]: " + reply);
				}
				
				int id = Integer.parseInt(reply.replace("{\"participant\":{\"id\":", "").split(",")[0]);
				Participants.ids.put(seed, id);
				
				if(this.debug) {
					System.out.println("[DEBUG]: " + lp + "'s seed == " + seed + " & " + lp + "'s id == " + id);
				}
				
				seed++;
			}
		}
		
		return this;
	}
	
	/*
	 * Start the tournament
	 */
	public void start() {
		if(this.api_key != null) {
			String reply = Web.post("https://api.challonge.com/v1/tournaments/" + this.url + "/start.json",
				"{}", 30*1000
			);
			if(this.debug) {
				System.out.println("[DEBUG]: " + reply);
			}
			
			try {
				String json = Web.get("https://api.challonge.com/v1/tournaments/" + JCA.tournament + "/matches.json", this.timeout, false);
				if(this.debug) {
					System.out.println("[DEBUG]: " + json);
				}
				
				if(json != null) {
					int match = 1;
					for(String ls : json.split(",")) {
						if(ls.replace(" ", "").replace("{\"match\":{", "").replace("[", "").startsWith("\"id\":")) {
							String id = ls.replace(" ", "").replace("{\"match\":{", "").replace("[", "").replace("\"id\":", "");
							Matches.matchIDs.put(match, Integer.parseInt(id.replace(" ", "")));
							match++;
						}
					}
				}
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	/*
	 * End the active tournament
	 */
	public void end() {
		if(this.api_key != null) {
			String reply = Web.post("https://api.challonge.com/v1/tournaments/" + this.url + "/finalize.json",
				"{}", 30*1000
			);
			if(this.debug) {
				System.out.println("[DEBUG]: " + reply);
			}
		}
	}
	
	/*
	 * Get the url of the tournament
	 */
	public String getURL() {
		return this.url;
	}
}
